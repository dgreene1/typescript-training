
function startDictionaryDemo(){
    const aHashMap = {
        reading: 88,
        writing: 97,
        history: 90,
        math: 99,
        science: 68
    };

    interface ISubjectToScoreDictionary{
        [aSubject: string]: number;
    }

    // Step #1: Hover over the error and see the only cryptic message that TypeScript has
    // Step #2: Solve it by telling TypeScript that you want "aHashMap" to be constructed as a "ISubjectToScoreDictionary".
    //      WHY does that work?
    //      Answer: Now, typescript is being told explicitly that the object may dynamically get properties in the future, but they will always have the index and type that you're excplitily setting it to
    const theValues = Object.keys(aHashMap).map(function(aKey){
        return aHashMap[aKey];
    });

    // Hint: interface IDictionary<T>
    // interface IDictionary<T>{
    //     [aKey: string]: T
    // }

    const notReallyAHashMap =  {
        user: "Bob Smith",
        SSN: 12342950,
        profile: {
            courses: ["reading", "writing", "history"]
        },
        alternateUsername: null,
        options: undefined
    }

    const result = Object.keys(notReallyAHashMap).map(aKey => {
        // Step #3: Hover over this for the error. Why can't this one be used in Object.keys?
        //      Is this even the use case for Object.keys?
        // Step #3: Can we initialize "notReallyAHashMap" to an interface that is less taxonomic and more data oriented.
        //      ... Perhaps... more... cough... GENERIC... ;)

        return notReallyAHashMap[aKey];
    })
}

startDictionaryDemo()